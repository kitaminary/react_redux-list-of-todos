{"version":3,"sources":["store/actions.ts","store/index.ts","api/api.ts","store/selectors.ts","components/ShowUser/ShowUser.tsx","components/TodosList/TodosList.tsx","App.tsx","index.tsx"],"names":["LOADING_TODOS","SHOW_USER","DELETE_TODO","showUserFromServer","payload","type","initialState","todos","user","store","createStore","state","action","filter","todo","id","composeWithDevTools","BASE_URL","getTodos","a","fetch","request","json","getUser","userId","deleteTodo","method","showUserSelector","ShowUser","useSelector","dispatch","useDispatch","className","username","name","email","phone","onClick","TodosList","allTodos","useState","query","setQuery","showTodos","setShowTodos","filteringTodos","title","toLowerCase","includes","getFilteringTodos","loadTodos","todosFromServer","userFromServer","userFS","setDeleting","useEffect","placeholder","value","onChange","event","target","completed","map","classNames","readOnly","checked","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e677fc24.chunk.js","sourcesContent":["import { Todo, User } from '../react-app-env';\n\nexport const LOADING_TODOS = 'LOADING_TODOS';\nexport const SHOW_USER = 'SHOW_USER';\nexport const DELETE_TODO = 'DELETE_TODO';\n\nexport const actionTodos = (payload: Todo[]) => ({\n  type: LOADING_TODOS,\n  payload,\n});\n\nexport const showUserFromServer = (payload: User | null) => ({\n  type: SHOW_USER,\n  payload,\n});\n\nexport const deleteTodoAction = (payload: number) => ({\n  type: DELETE_TODO,\n  payload,\n});\n","import { createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { Todo, User } from '../react-app-env';\nimport {\n  DELETE_TODO,\n  LOADING_TODOS,\n  SHOW_USER,\n} from './actions';\n\n// Initial state\nexport type RootState = {\n  todos: Todo[];\n  user: User | null;\n};\n\nconst initialState: RootState = {\n  todos: [],\n  user: null,\n};\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case LOADING_TODOS:\n      return { ...state, todos: [...state.todos, ...action.payload] };\n\n    case SHOW_USER:\n      return {\n        ...state,\n        user: action.payload,\n      };\n\n    case DELETE_TODO:\n      return {\n        ...state,\n        todos: [...state.todos].filter(todo => todo.id !== action.payload),\n      };\n\n    default:\n      return state;\n  }\n};\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(), // allows you to use http://extension.remotedev.io/\n);\n\nexport default store;\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport const getTodos = async () => {\n  const request = await fetch(`${BASE_URL}/todos`);\n\n  return request.json();\n};\n\n// export const addSomeTodo = async () => {\n//   const request = await fetch(`${BASE_URL}/todos`,\n//     {\n//       method: 'POST',\n//       headers: { 'Content-Type': 'application/json' },\n//       body: JSON.stringify({\n//         title: 'I think you need, '\n//           + 'go chilling',\n//         name: 'Jora',\n//         userId: Math.floor(Math.random() * 101) + 1,\n//         completed: false,\n//       }),\n//     });\n\n//   return request;\n// };\n\nexport const getUser = async (userId: number) => {\n  const request = await fetch(`${BASE_URL}/users/${userId}`);\n\n  return request.json();\n};\n\nexport const deleteTodo = async (id: number) => {\n  const request = await fetch(`${BASE_URL}/todos/${id}`, { method: 'DELETE' });\n\n  return request;\n};\n","import { RootState } from '.';\n\nexport const getTodosSelector = (state: RootState) => state.todos;\nexport const getFilteringTodos = (query: string) => {\n  return (state: RootState) => {\n    return state.todos.filter(todo => (\n      todo.title.toLowerCase().includes(query)\n    ));\n  };\n};\n\nexport const showUserSelector = (state: RootState) => state.user;\n","import React from 'react';\nimport './ShowUser.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { showUserFromServer } from '../../store/actions';\nimport { showUserSelector } from '../../store/selectors';\n\nexport const ShowUser: React.FC = () => {\n  const user = useSelector(showUserSelector);\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"box is-two-thirds column m-4\">\n      <div className=\"user__block box is-half m-auto\">\n        <div className=\"user\">\n          {user === null ? (\n            <p>No user selected</p>\n          )\n            : (\n              <>\n                {user && (\n                  <>\n                    <h2 className=\"user__title\"><span>{`Selected user: ${user?.id}`}</span></h2>\n\n                    <h3 className=\"user__username\">\n                      {user.username}\n                    </h3>\n                    <h2\n                      className=\"user__name\"\n                      data-cy=\"userName\"\n                    >\n                      {user.name}\n                    </h2>\n                    <p className=\"user__email\">{user.email}</p>\n                    <p className=\"user__phone\">{user.phone}</p>\n                    <button\n                      className=\"user__clear button is-info is-rounded\"\n                      type=\"button\"\n                      onClick={() => (dispatch(showUserFromServer(null)))}\n                    >\n                      Clear\n                    </button>\n                  </>\n                )}\n              </>\n            )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as store from '../../store/actions';\nimport {\n  deleteTodo,\n  getTodos,\n  getUser,\n} from '../../api/api';\nimport { ShowUser } from '../ShowUser/ShowUser';\nimport { getFilteringTodos, showUserSelector } from '../../store/selectors';\nimport { Todo } from '../../react-app-env';\n\nexport const TodosList: React.FC = () => {\n  const [query, setQuery] = useState('');\n  const [showTodos, setShowTodos] = useState('');\n  const dispatch = useDispatch();\n  const filteringTodos = useSelector(getFilteringTodos(query));\n  const user = useSelector(showUserSelector);\n\n  const filterForTodo = (allTodos: Todo[]): Todo[] => {\n    if (showTodos === 'active') {\n      return allTodos.filter(todo => todo.completed === false);\n    }\n\n    if (showTodos === 'completed') {\n      return allTodos.filter(todo => todo.completed === true);\n    }\n\n    return allTodos;\n  };\n\n  const loadTodos = async () => {\n    const todosFromServer = await getTodos();\n\n    dispatch(store.actionTodos(todosFromServer));\n  };\n\n  const userFromServer = async (userId: number) => {\n    const userFS = await getUser(userId);\n\n    dispatch(store.showUserFromServer(userFS));\n  };\n\n  const setDeleting = async (id: number) => {\n    await deleteTodo(id);\n    await dispatch(store.deleteTodoAction(id));\n  };\n\n  // const setAdd = async () => {\n  //   await addSomeTodo();\n  //   await loadTodos();\n  // };\n\n  useEffect(() => {\n    loadTodos();\n  }, []);\n\n  return (\n    <div className=\"content columns\">\n      <div className=\"column is-three-fifths m-4\">\n        {/* <button\n          className=\"button\"\n          onClick={() => setAdd()}\n          type=\"button\"\n        >\n          Add Some Todos\n        </button> */}\n        <h1 className=\"m-4\">Redux list of todos</h1>\n        <input\n          type=\"text\"\n          className=\"column input is-three-thirds m-4\"\n          placeholder=\"Search by title\"\n          value={query}\n          onChange={(event) => setQuery(event.target.value)}\n        />\n\n        <select\n          name=\"user\"\n          id=\"user\"\n          className=\"select\"\n          value={showTodos}\n          onChange={(event) => setShowTodos(event.target.value)}\n        >\n          <option value=\"\">Show all</option>\n          <option value=\"active\">Show active</option>\n          <option value=\"completed\">Show completed</option>\n        </select>\n        <ul>\n          {filterForTodo(filteringTodos).map(todo => (\n            <li\n              key={todo.id}\n              className={classNames(\n                'box',\n                'column',\n                'is-flex',\n                'is-three-thirds',\n                'is-justify-content-space-between',\n                'has-background-success-light',\n\n                {\n                  'has-background-danger-light': !todo.completed,\n                },\n              )}\n            >\n              <input type=\"checkbox\" readOnly checked={todo.completed} />\n              <p>{todo.title}</p>\n              <div className=\"button_box\">\n                <button\n                  type=\"button\"\n                  className=\"button is-danger\"\n                  onClick={() => setDeleting(todo.id)}\n                >\n                  delete\n                </button>\n                <button\n                  type=\"button\"\n                  className={classNames(\n                    'button',\n                    {\n                      'is-info': user?.id === todo.userId,\n                    },\n                  )}\n                  onClick={() => (userFromServer(todo.userId))}\n                >\n                  {`User - ${todo.userId}`}\n                </button>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n      <ShowUser />\n    </div>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-unused-vars */\n\nimport './App.scss';\nimport { TodosList } from './components/TodosList/TodosList';\n\nconst App = () => {\n  return (\n    <div>\n      <TodosList />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}